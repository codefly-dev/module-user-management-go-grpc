syntax = "proto3";
package customers;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

message VersionRequest {
}

message VersionResponse {
    string version = 1;
}

message User {
    string id = 1;
    string signup_auth_id = 2;
    string status = 3;
    string email = 5;
    UserProfile profile = 6;

   google.protobuf.Timestamp  signed_up_at = 7;
   google.protobuf.Timestamp last_login_at = 8;
}

message UserProfile {
    string name = 1;
    string given_name = 2;
}

message UserStatus {
    string status = 2;
}

message Organization {
    string id = 1;
    string name = 2;
}


message Team {
    string id = 1;
    string name = 2;
    repeated User members = 3; // List of users in the team
}

message Permission {
    string id = 1;
    string team_id = 2; // Associated team ID
    string resource = 3; // Resource to which the permission applies
    string role = 4;     // Role within the team (e.g., "admin", "member")
}

message CreateTeamRequest {
    string name = 1;
}

message CreateTeamResponse {
    Team team = 1;
}

message AddUserToTeamRequest {
    string team_id = 1;
    string user_id = 2;
}

message AddUserToTeamResponse {
    Team team = 1;
}

message RemoveUserFromTeamRequest {
    string team_id = 1;
    string user_id = 2;
}

message RemoveUserFromTeamResponse {
    Team team = 1;
}

message AssignPermissionRequest {
    string team_id = 1;
    Permission permission = 2;
}

message AssignPermissionResponse {
    Permission permission = 1;
}

message RevokePermissionRequest {
    string team_id = 1;
    string permission_id = 2;
}

message RevokePermissionResponse {
    Permission permission = 1;
}


// Information for login is passed by API Gateway as header
message LoginRequest {}

message LoginResponse {
    User user = 1;
}


// Information for registration is passed by API Gateway as header
// An organization will be created for the user and the user will be made the owner
message RegisterRequest {}

message RegisterUserResponse {
    User user = 1;
    UserStatus status = 2;
    Organization organization = 3;
}

message GetOrganizationRequest {}


message UpdateOrganizationRequest {
    string name = 1;
    string domain = 2;
}

message UpdateOrganizationResponse {
    Organization org = 1;
}



service BackendService {

    rpc Version(VersionRequest) returns (VersionResponse) {
        option (google.api.http) = {
            get: "/version"
        };
    }

    rpc Register(RegisterRequest) returns (RegisterUserResponse) {
      option (google.api.http) = {
          post: "/register"
      };
    }

    rpc Login(LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/login"
        };
    }

    // Organization for the authenticated user
    rpc GetOrganization(GetOrganizationRequest) returns (Organization) {
        option (google.api.http) = {
            get: "/organization"
        };
    }

    // Organization for the authenticated user
    rpc UpdateOrganization(UpdateOrganizationRequest) returns (UpdateOrganizationResponse) {
        option (google.api.http) = {
            post: "/organization"
            body: "*"
        };
    }

    // Create a team
    rpc CreateTeam(CreateTeamRequest) returns (CreateTeamResponse) {
        option (google.api.http) = {
            post: "/teams"
        };
    }

    // Add a user to a team
    rpc AddUserToTeam(AddUserToTeamRequest) returns (AddUserToTeamResponse) {
        option (google.api.http) = {
            post: "/teams/add_user"
        };
    }

    // Remove a user from a team
    rpc RemoveUserFromTeam(RemoveUserFromTeamRequest) returns (RemoveUserFromTeamResponse) {
        option (google.api.http) = {
            post: "/teams/remove_user"
        };
    }

    // Assign a permission to a team
    rpc AssignPermission(AssignPermissionRequest) returns (AssignPermissionResponse) {
        option (google.api.http) = {
            post: "/permissions/assign"
        };
    }

    // Revoke a permission from a team
    rpc RevokePermission(RevokePermissionRequest) returns (RevokePermissionResponse) {
        option (google.api.http) = {
            post: "/permissions/revoke"
        };
    }

}
