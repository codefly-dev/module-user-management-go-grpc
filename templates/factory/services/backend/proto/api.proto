syntax = "proto3";
package customers;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "buf/validate/validate.proto";

// Version related messages
message VersionResponse {
    string version = 1 [(buf.validate.field).string.min_len = 1];
}

// User related messages
message User {
    string id = 1 [(buf.validate.field).string.uuid = true];
    string status = 2;
    string email = 3;
    google.protobuf.Timestamp signed_up_at = 4;
    google.protobuf.Timestamp last_login_at = 5;
    UserProfile profile = 6;
}

message UserProfile {
    string name = 1;
    string given_name = 2;
}

message UserStatus {
    string status = 1;
}

// Organization related messages
message Organization {
    string id = 1;
    string name = 2;
    string domain = 3;
}

// Team related messages
message Team {
    string id = 1;
    string name = 2;
    repeated string member_ids = 3; // List of user IDs in the team
}

// Permission and Role related messages
message Permission {
    string id = 1;
    string name = 2;
    string resource = 3;
    string access = 4; // e.g., "read", "write", "delete"
}

message Role {
    string id = 1;
    string name = 2;
    repeated string permission_ids = 3;
}

// Authentication related messages
message LoginRequest {
}

message LoginResponse {
    User user = 1;
    string refresh_token = 3;
}

message RegisterRequest {
    string email = 1;
    string password = 2;
    UserProfile profile = 3;
    string organization_name = 4;
}

message RegisterUserResponse {
    User user = 1;
    UserStatus status = 2;
    Organization organization = 3;
    string access_token = 4;
    string refresh_token = 5;
}

// User management messages
message CreateUserRequest {
    string email = 1;
    UserProfile profile = 2;
}

message CreateUserResponse {
    User user = 1;
}

message DeleteUserRequest {
    string user_id = 1;
}

message DeleteUserResponse {
    User user = 1;
}

message GetUserRequest {
    string user_id = 1;
}

message UpdateUserRequest {
    string user_id = 1;
    UserProfile profile = 2;
}

// Organization management messages
message GetOrganizationRequest {
    string org_id = 1;
}

message UpdateOrganizationRequest {
    string org_id = 1;
    string name = 2;
    string domain = 3;
}

// Team management messages
message CreateTeamRequest {
    string name = 1;
    string org_id = 2;
}

message GetTeamRequest {
    string team_id = 1;
}

message UpdateTeamRequest {
    string team_id = 1;
    string name = 2;
}

message DeleteTeamRequest {
    string team_id = 1;
}

message AddUserToTeamRequest {
    string team_id = 1;
    string user_id = 2;
}

message RemoveUserFromTeamRequest {
    string team_id = 1;
    string user_id = 2;
}

// Permission and Role management messages
message CreatePermissionRequest {
    Permission permission = 1;
}

message CreateRoleRequest {
    Role role = 1;
}

message AssignRoleRequest {
    string role_id = 1;
    string user_id = 2;
    string resource_id = 3; // e.g., team_id or org_id
}

message RevokeRoleRequest {
    string role_id = 1;
    string user_id = 2;
    string resource_id = 3;
}

service BackendService {
    // Version
    rpc Version(google.protobuf.Empty) returns (VersionResponse) {
        option (google.api.http) = {
            get: "/version"
        };
    }

    // Authentication
    rpc Register(RegisterRequest) returns (RegisterUserResponse) {
        option (google.api.http) = {
            post: "/register"
            body: "*"
        };
    }

    rpc Login(LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/login"
            body: "*"
        };
    }

    // User management
    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
            post: "/users"
            body: "*"
        };
    }

    rpc GetUser(GetUserRequest) returns (User) {
        option (google.api.http) = {
            get: "/users/{user_id}"
        };
    }

    rpc UpdateUser(UpdateUserRequest) returns (User) {
        option (google.api.http) = {
            put: "/users/{user_id}"
            body: "*"
        };
    }

    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
        option (google.api.http) = {
            delete: "/users/{user_id}"
        };
    }

    // Organization management
    rpc GetOrganization(GetOrganizationRequest) returns (Organization) {
        option (google.api.http) = {
            get: "/organizations/{org_id}"
        };
    }

    rpc UpdateOrganization(UpdateOrganizationRequest) returns (Organization) {
        option (google.api.http) = {
            put: "/organizations/{org_id}"
            body: "*"
        };
    }

    // Team management
    rpc CreateTeam(CreateTeamRequest) returns (Team) {
        option (google.api.http) = {
            post: "/teams"
            body: "*"
        };
    }

    rpc GetTeam(GetTeamRequest) returns (Team) {
        option (google.api.http) = {
            get: "/teams/{team_id}"
        };
    }

    rpc UpdateTeam(UpdateTeamRequest) returns (Team) {
        option (google.api.http) = {
            put: "/teams/{team_id}"
            body: "*"
        };
    }

    rpc DeleteTeam(DeleteTeamRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/teams/{team_id}"
        };
    }

    rpc AddUserToTeam(AddUserToTeamRequest) returns (Team) {
        option (google.api.http) = {
            post: "/teams/{team_id}/users"
            body: "*"
        };
    }

    rpc RemoveUserFromTeam(RemoveUserFromTeamRequest) returns (Team) {
        option (google.api.http) = {
            delete: "/teams/{team_id}/users/{user_id}"
        };
    }

    // Permission and Role management
    rpc CreatePermission(CreatePermissionRequest) returns (Permission) {
        option (google.api.http) = {
            post: "/permissions"
            body: "*"
        };
    }

    rpc CreateRole(CreateRoleRequest) returns (Role) {
        option (google.api.http) = {
            post: "/roles"
            body: "*"
        };
    }

    rpc AssignRole(AssignRoleRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/roles/{role_id}/assign"
            body: "*"
        };
    }

    rpc RevokeRole(RevokeRoleRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/roles/{role_id}/revoke"
            body: "*"
        };
    }
}
